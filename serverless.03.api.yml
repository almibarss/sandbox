app: url-shortener
service: ${self:app}-api

frameworkVersion: '3'
useDotenv: true
disabledDeprecations:
  - LAMBDA_HASHING_VERSION_V2

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: python3.8
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  logs:
    restApi: ${self:custom.logs.${self:provider.stage}}
  environment:
    BUCKET_NAME: "${self:custom.bucketName}"
    LINKS_TABLE: "${self:custom.linksTable}"
    USERS_TABLE: "${self:custom.usersTable}"
    UNIQUES_TABLE: "${self:custom.uniquesTable}"
    COUNTERS_TABLE: "${self:custom.countersTable}"
  apiGateway:
    shouldStartNameWithService: true
    request:
      schemas:
        create-link-model:
          name: CreateLink
          schema: ${file(models/create-link.schema.json)}
        edit-link-model:
          name: EditLink
          schema: ${file(models/edit-link.schema.json)}
        create-user:
          name: CreateUser
          schema: ${file(models/create-user.schema.json)}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            - "s3:DeleteObject"
          Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:UpdateItem"
          Resource:
            - "arn:aws:dynamodb:*:*:table/${self:custom.countersTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
          Resource:
            - "arn:aws:dynamodb:*:*:table/${self:custom.linksTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.usersTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.uniquesTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.countersTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:DeleteItem"
          Resource:
            - "arn:aws:dynamodb:*:*:table/${self:custom.linksTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.usersTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.uniquesTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
          Resource:
            - "arn:aws:dynamodb:*:*:table/${self:custom.linksTable}"
            - "arn:aws:dynamodb:*:*:table/${self:custom.usersTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
            - "dynamodb:BatchWriteItem"
          Resource: "arn:aws:dynamodb:*:*:table/${self:custom.linksTable}"
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
          Resource:
            - "arn:aws:dynamodb:*:*:table/${self:custom.linksTable}/index/User-index"
            - "arn:aws:dynamodb:*:*:table/${self:custom.usersTable}/index/Email-index"

custom:
  stacks:
    dev: dev
    v1: pro
    v2: pro
  logs:
    dev: false
    v1: true
  cors:
    origin:
      dev: 'http://localhost:8080'
      v1: 'https://${cf:${self:app}-dns.RootDomain}'
      v2: '${self:custom.cors.origin.v1}'
  stack: ${self:custom.stacks.${self:provider.stage}}
  corsOrigin: ${self:custom.cors.origin.${self:provider.stage}}
  bucketName: ${cf:${self:app}-resources-${self:custom.stack}.RedirectBucketName}
  linksTable: ${cf:${self:app}-resources-${self:custom.stack}.LinksTable}
  usersTable: ${cf:${self:app}-resources-${self:custom.stack}.UsersTable}
  uniquesTable: ${cf:${self:app}-resources-${self:custom.stack}.UniquesTable}
  countersTable: ${cf:${self:app}-resources-${self:custom.stack}.CountersTable}
  customDomain:
    domainName: api.${cf:${self:app}-dns.RootDomain}
    certificateArn: ${env:CERTIFICATE_ARN}
    basePath: ${self:provider.stage}
    createRoute53Record: true

package:
  patterns:
    - '!**/*'
    - src/user/user.py
    - src/user/repo.py
    - src/user/api.py
    - src/link/link.py
    - src/link/repo.py
    - src/link/api.py
    - src/link/validators.py

functions:
  createUser:
    handler: src/user/api.create_user
    description: Creates a user with the given role
    events:
      - http:
          path: /admin/users
          integration: lambda
          method: post
          request:
            schemas:
              application/json: create-user
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "data": $input.json("$"),
                "authUser": "$context.authorizer.claims.email"
              }'
            passThrough: NEVER
          response:
            statusCodes:
              201:
                pattern: ''
              400:
                pattern: '.*(ValidationError|ApplicationError).*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "this operation is only intended for admin users" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  listUsers:
    handler: src/user/api.list_users
    description: List all the users
    events:
      - http:
          path: /admin/users
          integration: lambda
          method: get
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{ "authUser": "$context.authorizer.claims.email" }'
            passThrough: NEVER
          response:
            statusCodes:
              200:
                pattern: ''
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "this operation is only intended for admin users" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  deleteUser:
    handler: src/user/api.delete_user
    description: Delete the user identified by the given id
    events:
      - http:
          path: /admin/users/{userId}
          integration: lambda
          method: delete
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "userId": "$input.params().path.get("userId")",
                "authUser": "$context.authorizer.claims.email"
            }'
            passThrough: NEVER
          response:
            statusCodes:
              204:
                pattern: ''
              404:
                pattern: ''
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "this operation is only intended for admin users" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  apiInfo:
    handler: src/link/api.get_info
    description: Returns relevant information about this service such as the base URL
    events:
      - http:
          path: /info
          integration: lambda
          cors: true
          method: get
          response:
            statusCodes:
              200:
                pattern: ''
  createLink:
    handler: src/link/api.create_link
    description: Create a new link pointing to the URL provided
    events:
      - http:
          path: /links
          integration: lambda
          method: post
          cors:
            origin: '${self:custom.corsOrigin}'
          request:
            schemas:
              application/json: create-link-model
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "data": $input.json("$"),
                "authUser": "$context.authorizer.claims.email"
              }'
            passThrough: NEVER
          response:
            statusCodes:
              201:
                pattern: ''
              400:
                pattern: '.*(ValidationError|ApplicationError).*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  listLinks:
    handler: src/link/api.list_links
    description: List the links owned by the current user
    events:
      - http:
          path: /links
          integration: lambda
          method: get
          cors:
            origin: '${self:custom.corsOrigin}'
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{ "authUser": "$context.authorizer.claims.email" }'
          response:
            statusCodes:
              200:
                pattern: ''
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  deleteLink:
    handler: src/link/api.delete_link
    description: Deletes the link identified by its backhalf only if owned by the current user
    events:
      - http:
          path: /links/{backhalf}
          integration: lambda
          method: delete
          cors:
            origin: '${self:custom.corsOrigin}'
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "backhalf": "$input.params().path.get("backhalf")",
                "authUser": "$context.authorizer.claims.email"
              }'
          response:
            statusCodes:
              204:
                pattern: ''
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  deleteAllLinks:
    handler: src/link/api.delete_all
    description: Delete all the links owned by the current user
    events:
      - http:
          path: /links
          integration: lambda
          method: delete
          cors:
            origin: '${self:custom.corsOrigin}'
          request:
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "authUser": "$context.authorizer.claims.email"
              }'
          response:
            statusCodes:
              204:
                pattern: ''
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
  editLink:
    handler: src/link/api.edit_link
    description: Edit the link identified by its backhalf only if owned by the current user
    events:
      - http:
          path: /links/{backhalf}
          integration: lambda
          method: patch
          cors:
            origin: '${self:custom.corsOrigin}'
          request:
            schemas:
              application/json: edit-link-model
            template:
              application/x-www-form-urlencoded: null
              application/json: '{
                "backhalf": "$input.params().path.get("backhalf")",
                "authUser": "$context.authorizer.claims.email",
                "data": $input.json("$")
              }'
            passThrough: NEVER
          response:
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '.*(ValidationError|ApplicationError).*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              403:
                pattern: '.*AuthorizationError.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
              500:
                pattern: 'An error occurred.*when calling.*'
                template: '{ "message": "$input.path("$.errorMessage")" }'
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: "${cf:${self:app}-resources-${self:custom.stack}.UserPoolArn}"
