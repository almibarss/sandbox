{
	"info": {
		"_postman_id": "4348abd6-1896-48bf-b73d-cd170ca82dd8",
		"name": "Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9513392"
	},
	"item": [
		{
			"name": "an anonymous user",
			"item": [
				{
					"name": "is unauthorized to",
					"item": [
						{
							"name": "create a custom link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"google\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "list any links",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete any link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "google"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "is authorized to",
					"item": [
						{
							"name": "create a link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const requestData = JSON.parse(request.data);",
											"    testUtils.assertValidLinkInResponse({ origin: requestData.origin }, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/public/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"public",
										"links"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "an authenticated user",
			"item": [
				{
					"name": "when creating a custom link",
					"item": [
						{
							"name": "should succeed if the input data is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const response = pm.response.json();",
											"    const requestData = JSON.parse(request.data);",
											"    testUtils.assertValidCustomLink(response, {",
											"        origin: requestData.origin,",
											"        backhalf: requestData.backhalf,",
											"        user: pm.variables.get('testUserEmail')",
											"    },",
											"    pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"test-link-HMGeUdkrz238i\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the URL is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/url is invalid/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"this is not an URL\",\n    \"backhalf\": \"test-link-HMGeUdkrz238i\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the backhalf is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/does not match/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"invalid ch*rcter$\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link already exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createLink('https://www.bing.com', pm)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/already taken/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.google.com\",\n    \"backhalf\": \"{{createdLink}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "when listing links",
					"item": [
						{
							"name": "should see only her links",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://www.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a list of links\", function() {",
											"    const response = pm.response.json();",
											"    const user = pm.variables.get('testUserEmail');",
											"    pm.expect(response)",
											"        .to.be.an('object')",
											"        .and.to.have.property('data')",
											"            .to.be.an('array')",
											"            .and.to.be.length(1);",
											"    testUtils.assertValidCustomLink(response.data[0], {",
											"        origin: 'https://www.google.com',",
											"        backhalf: 'test-link-HMGeUdkrz238i',",
											"        user: user",
											"    },",
											"    pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/links",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when deleting a link",
					"item": [
						{
							"name": "should succeed  if the link is owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://wwww.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function() {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/cannot be deleted/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "OIUIOUI-LJOJOJHHO-3434KL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is not owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createLink('https://wwww.google.com', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/cannot be deleted/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "{{createdLink}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "when updating a link",
					"item": [
						{
							"name": "should succeed if the link is owned by the user and the new backhalf is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://www.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const requestData = JSON.parse(request.data);",
											"    testUtils.assertValidUpdatedLinkInResponse({",
											"        origin: 'https://www.google.com',",
											"        backhalf: requestData.backhalf,",
											"        user: pm.variables.get('testUserEmail')",
											"    },",
											"    pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"test-link-Z6uxw8Q5ukac\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should succeed if the link is owned by the user and the new URL is valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://www.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is a valid link\", function() {",
											"    const requestData = JSON.parse(request.data);",
											"    testUtils.assertValidUpdatedLinkInResponse({",
											"        origin: requestData.origin,",
											"        backhalf: 'test-link-HMGeUdkrz238i',",
											"        user: pm.variables.get('testUserEmail')",
											"    },",
											"    pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is owned by the user but the URL is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://www.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/is invalid/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"www.bing.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is owned by the user but the backhalf is invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createCustomLink('https://www.google.com', 'test-link-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/does not match/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"invalid chr*ter$\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "test-link-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link does not exist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/cannot be edited/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.nevermind.com/\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "OIUOIUIOU-LKJLKFHTH-3434"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the link is not owned by the user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createLink('https://www.google.com', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function() {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/cannot be edited/i, pm);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"origin\": \"https://www.bing.com\",\n    \"backhalf\": \"test-link-Z6uxw8Q5ukac\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "{{createdLink}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "should fail if the new backhalf is already taken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"api.createLink('https://www.bing.com', pm);",
											"api.createCustomLink('https://www.google.com', 'google-HMGeUdkrz238i', pm);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response is an error\", function() {",
											"    testUtils.assertValidErrorResponse(/already taken/i, pm);",
											"});",
											";"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"backhalf\": \"{{createdLink}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/links/:backhalf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"links",
										":backhalf"
									],
									"variable": [
										{
											"key": "backhalf",
											"value": "google-HMGeUdkrz238i"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var testUserName = pm.variables.get(\"testUserName\");",
							"var testUserPassword = pm.variables.get(\"testUserPass\");",
							"auth.loginAndReset(testUserName, testUserPassword, pm);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"auth = {",
					"    loginAndReset: function (username, password, pm) {",
					"        console.log(`Logging in as ${username}`);",
					"        const awsRegion = pm.environment.get('awsRegion');",
					"        const clientId = pm.environment.get('cognitoClientId');",
					"        pm.sendRequest({",
					"            url: `https://cognito-idp.${awsRegion}.amazonaws.com/`,",
					"            method: 'POST',",
					"            header: {",
					"                'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',",
					"                'Content-Type': 'application/x-amz-json-1.1'",
					"            },",
					"            ...JSONBody({",
					"                AuthParameters: {",
					"                    \"USERNAME\": username,",
					"                    \"PASSWORD\": password",
					"                },",
					"                AuthFlow: \"USER_PASSWORD_AUTH\",",
					"                ClientId: clientId",
					"            }),",
					"        }, function (err, res) {",
					"            if (err) {",
					"                console.error(err);",
					"            } else if (res.code !== 200) {",
					"                console.error(res.json().message);",
					"            } else {",
					"                const idToken = res.json().AuthenticationResult.IdToken",
					"                console.debug(`Logged in with id_token=${idToken}`);",
					"                pm.variables.set(\"cognitoIdToken\", idToken);",
					"                pm.request.headers.add({key: 'Authorization', value: `Bearer ${idToken}`});",
					"                api.deleteAll(pm);",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"const mandatoryFields = ['url', 'origin', 'backhalf', 'created_at'];",
					"",
					"testUtils = {",
					"    assertValidLinkInResponse: function (expected, pm) {",
					"        const response = pm.response.json();",
					"        pm.expect(response)",
					"            .to.be.an('object')",
					"            .and.to.have.keys(mandatoryFields);",
					"        pm.expect(response).to.have.property('origin', expected.origin);",
					"    }, ",
					"",
					"     assertValidCustomLinkInResponse: function (expected, pm) {",
					"        const response = pm.response.json();",
					"        assertValidCustomLink(response, expected, pm);",
					"    },",
					"",
					"",
					"    assertValidCustomLink: function (object, expected, pm) {",
					"        pm.expect(object)",
					"            .to.be.an('object')",
					"            .and.to.have.keys(mandatoryFields.concat('user'));",
					"        pm.expect(object).to.have.property('origin', expected.origin);",
					"        pm.expect(object).to.have.property('backhalf', expected.backhalf);",
					"        pm.expect(object).to.have.property('user', expected.user);",
					"    },",
					"",
					"    assertValidUpdatedLinkInResponse: function (expected, pm) {",
					"        const response = pm.response.json();",
					"        pm.expect(response)",
					"            .to.be.an('object')",
					"            .and.to.have.keys(mandatoryFields.concat('user', 'updated_at'));",
					"        pm.expect(response).to.have.property('origin', expected.origin);",
					"        pm.expect(response).to.have.property('backhalf', expected.backhalf);",
					"        pm.expect(response).to.have.property('user', expected.user);",
					"    }, ",
					"",
					"    assertValidErrorResponse: function (message, pm) {",
					"        const response = pm.response.json();",
					"        pm.expect(response)",
					"            .to.be.an('object')",
					"            .and.to.have.property('message')",
					"                .to.match(message);",
					"    }",
					"}",
					"",
					"api = {",
					"    deleteLink: function (link, pm) {",
					"        console.log(`Deleting link '${link}'`)",
					"        return pm.sendRequest({",
					"            url: pm.environment.get('baseUrl') + `/links/${link}`,",
					"            method: 'DELETE',",
					"            header: {",
					"                'Authorization': 'Bearer ' + pm.variables.get('cognitoIdToken')",
					"            },",
					"        }, handleRes);",
					"    },",
					"",
					"    deleteAll: function (pm) {",
					"        console.log(\"Clearing user data\");",
					"        return pm.sendRequest({",
					"            url: pm.environment.get('baseUrl') + `/links`,",
					"            method: 'DELETE',",
					"            header: {",
					"                'Authorization': 'Bearer ' + pm.variables.get('cognitoIdToken')",
					"            },",
					"        }, handleRes);",
					"    },",
					"",
					"    createCustomLink: function (origin, backhalf, pm) {",
					"        console.log(`Creating custom link '${backhalf}' pointing to '${origin}'`);",
					"        pm.sendRequest({",
					"            url: pm.environment.get('baseUrl') + '/links',",
					"            method: 'POST',",
					"            header: {",
					"                'content-type': 'application/json',",
					"                'Authorization': 'Bearer ' + pm.variables.get('cognitoIdToken')",
					"            },",
					"            ...JSONBody({origin, backhalf}),",
					"        }, handleRes);",
					"    },",
					"",
					"    createLink: function (origin, pm) {",
					"        console.log(`Creating link pointing to '${origin}'`);",
					"        pm.sendRequest({",
					"            url: pm.environment.get('baseUrl') + '/public/links',",
					"            method: 'POST',",
					"            header: {",
					"                'content-type': 'application/json',",
					"            },",
					"            ...JSONBody({origin}),",
					"        }, function(err, res) {",
					"            handleRes(err, res);",
					"            if (res.code === 201) {",
					"                const backhalf = res.json().backhalf;",
					"                console.log(`Created link ${backhalf}`);",
					"                pm.variables.set('createdLink', backhalf);",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"function JSONBody(data) {",
					"    return {",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify(data),",
					"        }",
					"    }",
					"}",
					"",
					"function handleRes(err, res) {",
					"  if (err) {",
					"      console.error(err);",
					"  } else if (![200, 201, 204].includes(res.code)) {",
					"      console.error(res.json().message);",
					"  }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testUserName",
			"value": "it_user",
			"type": "string"
		},
		{
			"key": "testUserPass",
			"value": "yourPa$sword12345",
			"type": "string"
		},
		{
			"key": "testUserEmail",
			"value": "it-testing@postman.co",
			"type": "string"
		}
	]
}